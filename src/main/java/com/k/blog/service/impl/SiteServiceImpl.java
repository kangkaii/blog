package com.k.blog.service.impl;import com.github.pagehelper.PageHelper;import com.k.blog.dao.AttachDao;import com.k.blog.dao.CommentDao;import com.k.blog.dao.ContentDao;import com.k.blog.dao.MetaDao;import com.k.blog.enums.Types;import com.k.blog.model.bo.StatisticsBo;import com.k.blog.model.vo.*;import com.k.blog.service.SiteService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Arrays;import java.util.List;/** * @author kangkai on 2018/4/25. */@Servicepublic class SiteServiceImpl implements SiteService{    private static final Logger logger = LoggerFactory.getLogger(SiteServiceImpl.class);    @Autowired    ContentDao contentDao;    @Autowired    AttachDao attachDao;    @Autowired    MetaDao metaDao;    @Autowired    CommentDao commentDao;    @Override    public List<CommentVo> recentComments(int limit) {        if (limit < 0 || limit > 10) {            limit = 10;        }        //todo 检查分页是否成功        PageHelper.startPage(1, limit);        List<CommentVo> byPage = commentDao.getCommentList();        return byPage;    }    @Override    public List<ContentVo> recentContents(int limit) {        logger.debug("Enter recentContents method");        if (limit < 0 || limit > 10) {            limit = 10;        }        /*ContentVoExample example = new ContentVoExample();        example.createCriteria().andStatusEqualTo(Types.PUBLISH.getType()).andTypeEqualTo(Types.ARTICLE.getType())        .andCommentsNumBetween(10,20)        .andCommentsNumBetween(10,20);        example.setOrderByClause("created desc");        example.setDistinct(true);*/        PageHelper.startPage(1, limit);        String[] contentTypes = {Types.PUBLISH.getType(),Types.ARTICLE.getType()};        //List<ContentVo> list = contentDao.getContentList(Arrays.asList(contentTypes));        List<ContentVo> list = contentDao.getContentList(Arrays.asList(contentTypes));        logger.debug("Exit recentContents method");        return list;    }    @Override    public StatisticsBo getStatistics() {        logger.debug("Enter getStatistics method");        StatisticsBo statistics = new StatisticsBo();        ContentVoExample contentVoExample = new ContentVoExample();        contentVoExample.createCriteria().andTypeEqualTo(Types.ARTICLE.getType()).andStatusEqualTo(Types.PUBLISH.getType());        Long articles = contentDao.getCount();        Long comments = commentDao.getCount();        Long attachs = attachDao.getCount();        MetaVoExample metaVoExample = new MetaVoExample();        metaVoExample.createCriteria().andTypeEqualTo(Types.LINK.getType());        Long links = metaDao.getCount();        statistics.setArticles(articles);        statistics.setComments(comments);        statistics.setAttachs(attachs);        statistics.setLinks(links);        logger.debug("Exit getStatistics method");        return statistics;    }}