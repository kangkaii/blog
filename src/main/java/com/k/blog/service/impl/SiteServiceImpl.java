package com.k.blog.service.impl;import com.github.pagehelper.PageHelper;import com.k.blog.enums.Types;import com.k.blog.mapper.AttachMapper;import com.k.blog.mapper.CommentMapper;import com.k.blog.mapper.ContentMapper;import com.k.blog.mapper.MetaMapper;import com.k.blog.model.bo.StatisticsBo;import com.k.blog.model.vo.*;import com.k.blog.service.SiteService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;/** * @author kangkai on 2018/4/25. */@Servicepublic class SiteServiceImpl implements SiteService{    private static final Logger logger = LoggerFactory.getLogger(SiteServiceImpl.class);    @Autowired    CommentMapper commentMapper;    @Autowired    ContentMapper contentMapper;    @Autowired    AttachMapper attachMapper;    @Autowired    MetaMapper metaMapper;    @Override    public List<CommentVo> recentComments(int limit) {        if (limit < 0 || limit > 10) {            limit = 10;        }        CommentVoExample example = new CommentVoExample();        example.setOrderByClause("created desc");        //目前没什么用        //todo 需要分页        PageHelper.startPage(1, limit);        List<CommentVo> byPage = commentMapper.selectByExampleWithBLOBs(example);        return byPage;    }    @Override    public List<ContentVo> recentContents(int limit) {        logger.debug("Enter recentContents method");        if (limit < 0 || limit > 10) {            limit = 10;        }        ContentVoExample example = new ContentVoExample();        example.createCriteria().andStatusEqualTo(Types.PUBLISH.getType()).andTypeEqualTo(Types.ARTICLE.getType());        example.setOrderByClause("created desc");        example.setDistinct(true);        PageHelper.startPage(1, limit);        List<ContentVo> list = contentMapper.selectByExample(example);        logger.debug("Exit recentContents method");        return list;    }    @Override    public StatisticsBo getStatistics() {        logger.debug("Enter getStatistics method");        StatisticsBo statistics = new StatisticsBo();        ContentVoExample contentVoExample = new ContentVoExample();        contentVoExample.createCriteria().andTypeEqualTo(Types.ARTICLE.getType()).andStatusEqualTo(Types.PUBLISH.getType());        Long articles = contentMapper.countByExample(contentVoExample);        Long comments = commentMapper.countByExample(new CommentVoExample());        Long attachs = attachMapper.countByExample(new AttachVoExample());        MetaVoExample metaVoExample = new MetaVoExample();        metaVoExample.createCriteria().andTypeEqualTo(Types.LINK.getType());        Long links = metaMapper.countByExample(metaVoExample);        statistics.setArticles(articles);        statistics.setComments(comments);        statistics.setAttachs(attachs);        statistics.setLinks(links);        logger.debug("Exit getStatistics method");        return statistics;    }}